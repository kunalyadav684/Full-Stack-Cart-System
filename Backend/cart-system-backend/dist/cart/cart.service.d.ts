import { AddItemDto } from "./dto/add-item.dto";
import { Model } from "mongoose";
import { Cart } from "./interfaces/cart.interface";
export declare class CartService {
    private cartModel;
    constructor(cartModel: Model<Cart>);
    addItem(userId: string, item: AddItemDto): Promise<import("mongoose").Document<unknown, {}, Cart, {}> & Cart & {
        _id: import("mongoose").Types.ObjectId;
    } & {
        __v: number;
    }>;
    updateItem(userId: string, productId: string, quantity: number): Promise<(import("mongoose").Document<unknown, {}, Cart, {}> & Cart & {
        _id: import("mongoose").Types.ObjectId;
    } & {
        __v: number;
    }) | undefined>;
    removeItem(userId: string, productId: string): Promise<any>;
    getCart(userId: string): Promise<{
        total: number | undefined;
        userId?: string | undefined;
        items?: import("./interfaces/cart.interface").CartItem[] | undefined;
        URL?: string | undefined;
        alinkColor?: string | undefined;
        all?: HTMLAllCollection | undefined;
        anchors?: HTMLCollectionOf<HTMLAnchorElement> | undefined;
        applets?: HTMLCollection | undefined;
        bgColor?: string | undefined;
        body?: HTMLElement | undefined;
        characterSet?: string | undefined;
        charset?: string | undefined;
        compatMode?: string | undefined;
        contentType?: string | undefined;
        cookie?: string | undefined;
        currentScript?: HTMLOrSVGScriptElement | null | undefined;
        defaultView?: (Window & typeof globalThis) | null | undefined;
        designMode?: string | undefined;
        dir?: string | undefined;
        doctype?: DocumentType | null | undefined;
        documentElement?: HTMLElement | undefined;
        documentURI?: string | undefined;
        domain?: string | undefined;
        embeds?: HTMLCollectionOf<HTMLEmbedElement> | undefined;
        fgColor?: string | undefined;
        forms?: HTMLCollectionOf<HTMLFormElement> | undefined;
        fragmentDirective?: FragmentDirective | undefined;
        fullscreen?: boolean | undefined;
        fullscreenEnabled?: boolean | undefined;
        head?: HTMLHeadElement | undefined;
        hidden?: boolean | undefined;
        images?: HTMLCollectionOf<HTMLImageElement> | undefined;
        implementation?: DOMImplementation | undefined;
        inputEncoding?: string | undefined;
        lastModified?: string | undefined;
        linkColor?: string | undefined;
        links?: HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement> | undefined;
        location?: Location | undefined;
        onfullscreenchange?: ((this: Document, ev: Event) => any) | null | undefined;
        onfullscreenerror?: ((this: Document, ev: Event) => any) | null | undefined;
        onpointerlockchange?: ((this: Document, ev: Event) => any) | null | undefined;
        onpointerlockerror?: ((this: Document, ev: Event) => any) | null | undefined;
        onreadystatechange?: ((this: Document, ev: Event) => any) | null | undefined;
        onvisibilitychange?: ((this: Document, ev: Event) => any) | null | undefined;
        ownerDocument?: null | undefined;
        pictureInPictureEnabled?: boolean | undefined;
        plugins?: HTMLCollectionOf<HTMLEmbedElement> | undefined;
        readyState?: DocumentReadyState | undefined;
        referrer?: string | undefined;
        rootElement?: SVGSVGElement | null | undefined;
        scripts?: HTMLCollectionOf<HTMLScriptElement> | undefined;
        scrollingElement?: Element | null | undefined;
        timeline?: DocumentTimeline | undefined;
        title?: string | undefined;
        visibilityState?: DocumentVisibilityState | undefined;
        vlinkColor?: string | undefined;
        adoptNode?: (<T extends Node>(node: T) => T) | undefined;
        captureEvents?: (() => void) | undefined;
        caretPositionFromPoint?: ((x: number, y: number, options?: CaretPositionFromPointOptions) => CaretPosition | null) | undefined;
        caretRangeFromPoint?: ((x: number, y: number) => Range | null) | undefined;
        clear?: (() => void) | undefined;
        close?: (() => void) | undefined;
        createAttribute?: ((localName: string) => Attr) | undefined;
        createAttributeNS?: ((namespace: string | null, qualifiedName: string) => Attr) | undefined;
        createCDATASection?: ((data: string) => CDATASection) | undefined;
        createComment?: ((data: string) => Comment) | undefined;
        createDocumentFragment?: (() => DocumentFragment) | undefined;
        createElement?: {
            <K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];
            <K extends keyof HTMLElementDeprecatedTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementDeprecatedTagNameMap[K];
            (tagName: string, options?: ElementCreationOptions): HTMLElement;
        } | undefined;
        createElementNS?: {
            (namespaceURI: "http://www.w3.org/1999/xhtml", qualifiedName: string): HTMLElement;
            <K extends keyof SVGElementTagNameMap>(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: K): SVGElementTagNameMap[K];
            (namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: string): SVGElement;
            <K extends keyof MathMLElementTagNameMap>(namespaceURI: "http://www.w3.org/1998/Math/MathML", qualifiedName: K): MathMLElementTagNameMap[K];
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", qualifiedName: string): MathMLElement;
            (namespaceURI: string | null, qualifiedName: string, options?: ElementCreationOptions): Element;
            (namespace: string | null, qualifiedName: string, options?: string | ElementCreationOptions): Element;
        } | undefined;
        createEvent?: {
            (eventInterface: "AnimationEvent"): AnimationEvent;
            (eventInterface: "AnimationPlaybackEvent"): AnimationPlaybackEvent;
            (eventInterface: "AudioProcessingEvent"): AudioProcessingEvent;
            (eventInterface: "BeforeUnloadEvent"): BeforeUnloadEvent;
            (eventInterface: "BlobEvent"): BlobEvent;
            (eventInterface: "ClipboardEvent"): ClipboardEvent;
            (eventInterface: "CloseEvent"): CloseEvent;
            (eventInterface: "CompositionEvent"): CompositionEvent;
            (eventInterface: "ContentVisibilityAutoStateChangeEvent"): ContentVisibilityAutoStateChangeEvent;
            (eventInterface: "CustomEvent"): CustomEvent;
            (eventInterface: "DeviceMotionEvent"): DeviceMotionEvent;
            (eventInterface: "DeviceOrientationEvent"): DeviceOrientationEvent;
            (eventInterface: "DragEvent"): DragEvent;
            (eventInterface: "ErrorEvent"): ErrorEvent;
            (eventInterface: "Event"): Event;
            (eventInterface: "Events"): Event;
            (eventInterface: "FocusEvent"): FocusEvent;
            (eventInterface: "FontFaceSetLoadEvent"): FontFaceSetLoadEvent;
            (eventInterface: "FormDataEvent"): FormDataEvent;
            (eventInterface: "GamepadEvent"): GamepadEvent;
            (eventInterface: "HashChangeEvent"): HashChangeEvent;
            (eventInterface: "IDBVersionChangeEvent"): IDBVersionChangeEvent;
            (eventInterface: "InputEvent"): InputEvent;
            (eventInterface: "KeyboardEvent"): KeyboardEvent;
            (eventInterface: "MIDIConnectionEvent"): MIDIConnectionEvent;
            (eventInterface: "MIDIMessageEvent"): MIDIMessageEvent;
            (eventInterface: "MediaEncryptedEvent"): MediaEncryptedEvent;
            (eventInterface: "MediaKeyMessageEvent"): MediaKeyMessageEvent;
            (eventInterface: "MediaQueryListEvent"): MediaQueryListEvent;
            (eventInterface: "MediaStreamTrackEvent"): MediaStreamTrackEvent;
            (eventInterface: "MessageEvent"): MessageEvent;
            (eventInterface: "MouseEvent"): MouseEvent;
            (eventInterface: "MouseEvents"): MouseEvent;
            (eventInterface: "OfflineAudioCompletionEvent"): OfflineAudioCompletionEvent;
            (eventInterface: "PageRevealEvent"): PageRevealEvent;
            (eventInterface: "PageSwapEvent"): PageSwapEvent;
            (eventInterface: "PageTransitionEvent"): PageTransitionEvent;
            (eventInterface: "PaymentMethodChangeEvent"): PaymentMethodChangeEvent;
            (eventInterface: "PaymentRequestUpdateEvent"): PaymentRequestUpdateEvent;
            (eventInterface: "PictureInPictureEvent"): PictureInPictureEvent;
            (eventInterface: "PointerEvent"): PointerEvent;
            (eventInterface: "PopStateEvent"): PopStateEvent;
            (eventInterface: "ProgressEvent"): ProgressEvent;
            (eventInterface: "PromiseRejectionEvent"): PromiseRejectionEvent;
            (eventInterface: "RTCDTMFToneChangeEvent"): RTCDTMFToneChangeEvent;
            (eventInterface: "RTCDataChannelEvent"): RTCDataChannelEvent;
            (eventInterface: "RTCErrorEvent"): RTCErrorEvent;
            (eventInterface: "RTCPeerConnectionIceErrorEvent"): RTCPeerConnectionIceErrorEvent;
            (eventInterface: "RTCPeerConnectionIceEvent"): RTCPeerConnectionIceEvent;
            (eventInterface: "RTCTrackEvent"): RTCTrackEvent;
            (eventInterface: "SecurityPolicyViolationEvent"): SecurityPolicyViolationEvent;
            (eventInterface: "SpeechSynthesisErrorEvent"): SpeechSynthesisErrorEvent;
            (eventInterface: "SpeechSynthesisEvent"): SpeechSynthesisEvent;
            (eventInterface: "StorageEvent"): StorageEvent;
            (eventInterface: "SubmitEvent"): SubmitEvent;
            (eventInterface: "TextEvent"): TextEvent;
            (eventInterface: "ToggleEvent"): ToggleEvent;
            (eventInterface: "TouchEvent"): TouchEvent;
            (eventInterface: "TrackEvent"): TrackEvent;
            (eventInterface: "TransitionEvent"): TransitionEvent;
            (eventInterface: "UIEvent"): UIEvent;
            (eventInterface: "UIEvents"): UIEvent;
            (eventInterface: "WebGLContextEvent"): WebGLContextEvent;
            (eventInterface: "WheelEvent"): WheelEvent;
            (eventInterface: string): Event;
        } | undefined;
        createNodeIterator?: ((root: Node, whatToShow?: number, filter?: NodeFilter | null) => NodeIterator) | undefined;
        createProcessingInstruction?: ((target: string, data: string) => ProcessingInstruction) | undefined;
        createRange?: (() => Range) | undefined;
        createTextNode?: ((data: string) => Text) | undefined;
        createTreeWalker?: ((root: Node, whatToShow?: number, filter?: NodeFilter | null) => TreeWalker) | undefined;
        execCommand?: ((commandId: string, showUI?: boolean, value?: string) => boolean) | undefined;
        exitFullscreen?: (() => Promise<void>) | undefined;
        exitPictureInPicture?: (() => Promise<void>) | undefined;
        exitPointerLock?: (() => void) | undefined;
        getElementById?: ((elementId: string) => HTMLElement | null) | undefined;
        getElementsByClassName?: ((classNames: string) => HTMLCollectionOf<Element>) | undefined;
        getElementsByName?: ((elementName: string) => NodeListOf<HTMLElement>) | undefined;
        getElementsByTagName?: {
            <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
            <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
            <K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
            <K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } | undefined;
        getElementsByTagNameNS?: {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string | null, localName: string): HTMLCollectionOf<Element>;
        } | undefined;
        getSelection?: (() => Selection | null) | undefined;
        hasFocus?: (() => boolean) | undefined;
        hasStorageAccess?: (() => Promise<boolean>) | undefined;
        importNode?: (<T extends Node>(node: T, subtree?: boolean) => T) | undefined;
        open?: {
            (unused1?: string, unused2?: string): Document;
            (url: string | URL, name: string, features: string): WindowProxy | null;
        } | undefined;
        queryCommandEnabled?: ((commandId: string) => boolean) | undefined;
        queryCommandIndeterm?: ((commandId: string) => boolean) | undefined;
        queryCommandState?: ((commandId: string) => boolean) | undefined;
        queryCommandSupported?: ((commandId: string) => boolean) | undefined;
        queryCommandValue?: ((commandId: string) => string) | undefined;
        releaseEvents?: (() => void) | undefined;
        requestStorageAccess?: (() => Promise<void>) | undefined;
        startViewTransition?: ((callbackOptions?: ViewTransitionUpdateCallback) => ViewTransition) | undefined;
        write?: ((...text: string[]) => void) | undefined;
        writeln?: ((...text: string[]) => void) | undefined;
        addEventListener?: {
            <K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } | undefined;
        removeEventListener?: {
            <K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } | undefined;
        baseURI?: string | undefined;
        childNodes?: NodeListOf<ChildNode> | undefined;
        firstChild?: ChildNode | null | undefined;
        isConnected?: boolean | undefined;
        lastChild?: ChildNode | null | undefined;
        nextSibling?: ChildNode | null | undefined;
        nodeName?: string | undefined;
        nodeType?: number | undefined;
        nodeValue?: string | null | undefined;
        parentElement?: HTMLElement | null | undefined;
        parentNode?: ParentNode | null | undefined;
        previousSibling?: ChildNode | null | undefined;
        textContent?: string | null | undefined;
        appendChild?: (<T extends Node>(node: T) => T) | undefined;
        cloneNode?: ((subtree?: boolean) => Node) | undefined;
        compareDocumentPosition?: ((other: Node) => number) | undefined;
        contains?: ((other: Node | null) => boolean) | undefined;
        getRootNode?: ((options?: GetRootNodeOptions) => Node) | undefined;
        hasChildNodes?: (() => boolean) | undefined;
        insertBefore?: (<T extends Node>(node: T, child: Node | null) => T) | undefined;
        isDefaultNamespace?: ((namespace: string | null) => boolean) | undefined;
        isEqualNode?: ((otherNode: Node | null) => boolean) | undefined;
        isSameNode?: ((otherNode: Node | null) => boolean) | undefined;
        lookupNamespaceURI?: ((prefix: string | null) => string | null) | undefined;
        lookupPrefix?: ((namespace: string | null) => string | null) | undefined;
        normalize?: (() => void) | undefined;
        removeChild?: (<T extends Node>(child: T) => T) | undefined;
        replaceChild?: (<T extends Node>(node: Node, child: T) => T) | undefined;
        ELEMENT_NODE?: 1 | undefined;
        ATTRIBUTE_NODE?: 2 | undefined;
        TEXT_NODE?: 3 | undefined;
        CDATA_SECTION_NODE?: 4 | undefined;
        ENTITY_REFERENCE_NODE?: 5 | undefined;
        ENTITY_NODE?: 6 | undefined;
        PROCESSING_INSTRUCTION_NODE?: 7 | undefined;
        COMMENT_NODE?: 8 | undefined;
        DOCUMENT_NODE?: 9 | undefined;
        DOCUMENT_TYPE_NODE?: 10 | undefined;
        DOCUMENT_FRAGMENT_NODE?: 11 | undefined;
        NOTATION_NODE?: 12 | undefined;
        DOCUMENT_POSITION_DISCONNECTED?: 1 | undefined;
        DOCUMENT_POSITION_PRECEDING?: 2 | undefined;
        DOCUMENT_POSITION_FOLLOWING?: 4 | undefined;
        DOCUMENT_POSITION_CONTAINS?: 8 | undefined;
        DOCUMENT_POSITION_CONTAINED_BY?: 16 | undefined;
        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC?: 32 | undefined;
        dispatchEvent?: ((event: Event) => boolean) | undefined;
        activeElement?: Element | null | undefined;
        adoptedStyleSheets?: CSSStyleSheet[] | undefined;
        fullscreenElement?: Element | null | undefined;
        pictureInPictureElement?: Element | null | undefined;
        pointerLockElement?: Element | null | undefined;
        styleSheets?: StyleSheetList | undefined;
        elementFromPoint?: ((x: number, y: number) => Element | null) | undefined;
        elementsFromPoint?: ((x: number, y: number) => Element[]) | undefined;
        getAnimations?: (() => Animation[]) | undefined;
        fonts?: FontFaceSet | undefined;
        onabort?: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null | undefined;
        onanimationcancel?: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null | undefined;
        onanimationend?: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null | undefined;
        onanimationiteration?: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null | undefined;
        onanimationstart?: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null | undefined;
        onauxclick?: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null | undefined;
        onbeforeinput?: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null | undefined;
        onbeforetoggle?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onblur?: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null | undefined;
        oncancel?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        oncanplay?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        oncanplaythrough?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onchange?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onclick?: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null | undefined;
        onclose?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        oncontextlost?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        oncontextmenu?: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null | undefined;
        oncontextrestored?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        oncopy?: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null | undefined;
        oncuechange?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        oncut?: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null | undefined;
        ondblclick?: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null | undefined;
        ondrag?: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null | undefined;
        ondragend?: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null | undefined;
        ondragenter?: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null | undefined;
        ondragleave?: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null | undefined;
        ondragover?: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null | undefined;
        ondragstart?: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null | undefined;
        ondrop?: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null | undefined;
        ondurationchange?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onemptied?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onended?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onerror?: OnErrorEventHandler | undefined;
        onfocus?: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null | undefined;
        onformdata?: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null | undefined;
        ongotpointercapture?: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null | undefined;
        oninput?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        oninvalid?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onkeydown?: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null | undefined;
        onkeypress?: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null | undefined;
        onkeyup?: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null | undefined;
        onload?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onloadeddata?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onloadedmetadata?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onloadstart?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onlostpointercapture?: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null | undefined;
        onmousedown?: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null | undefined;
        onmouseenter?: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null | undefined;
        onmouseleave?: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null | undefined;
        onmousemove?: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null | undefined;
        onmouseout?: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null | undefined;
        onmouseover?: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null | undefined;
        onmouseup?: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null | undefined;
        onpaste?: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null | undefined;
        onpause?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onplay?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onplaying?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onpointercancel?: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null | undefined;
        onpointerdown?: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null | undefined;
        onpointerenter?: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null | undefined;
        onpointerleave?: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null | undefined;
        onpointermove?: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null | undefined;
        onpointerout?: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null | undefined;
        onpointerover?: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null | undefined;
        onpointerup?: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null | undefined;
        onprogress?: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null | undefined;
        onratechange?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onreset?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onresize?: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null | undefined;
        onscroll?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onscrollend?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onsecuritypolicyviolation?: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null | undefined;
        onseeked?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onseeking?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onselect?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onselectionchange?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onselectstart?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onslotchange?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onstalled?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onsubmit?: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null | undefined;
        onsuspend?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        ontimeupdate?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        ontoggle?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontransitioncancel?: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null | undefined;
        ontransitionend?: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null | undefined;
        ontransitionrun?: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null | undefined;
        ontransitionstart?: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null | undefined;
        onvolumechange?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onwaiting?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onwebkitanimationend?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onwebkitanimationiteration?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onwebkitanimationstart?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onwebkittransitionend?: ((this: GlobalEventHandlers, ev: Event) => any) | null | undefined;
        onwheel?: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null | undefined;
        childElementCount?: number | undefined;
        children?: HTMLCollection | undefined;
        firstElementChild?: Element | null | undefined;
        lastElementChild?: Element | null | undefined;
        append?: ((...nodes: (Node | string)[]) => void) | undefined;
        prepend?: ((...nodes: (Node | string)[]) => void) | undefined;
        querySelector?: {
            <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
            <K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
            <K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
            <K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
            <E extends Element = Element>(selectors: string): E | null;
        } | undefined;
        querySelectorAll?: {
            <K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
            <K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
            <K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
            <K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
            <E extends Element = Element>(selectors: string): NodeListOf<E>;
        } | undefined;
        replaceChildren?: ((...nodes: (Node | string)[]) => void) | undefined;
        createExpression?: ((expression: string, resolver?: XPathNSResolver | null) => XPathExpression) | undefined;
        createNSResolver?: ((nodeResolver: Node) => Node) | undefined;
        evaluate?: ((expression: string, contextNode: Node, resolver?: XPathNSResolver | null, type?: number, result?: XPathResult | null) => XPathResult) | undefined;
        _id?: import("mongoose").Types.ObjectId | undefined;
        __v?: number | undefined;
    }>;
}
